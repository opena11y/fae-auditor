import sys
import os
import string
import glob

import optparse
import subprocess
import shlex
import time
import getopt

from datetime import datetime
from uid      import generate

from django.shortcuts import render_to_response, HttpResponseRedirect
from django.shortcuts import redirect
from django.http import HttpResponse, Http404
from django.template import RequestContext
from django.core.urlresolvers import reverse

from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth            import logout as auth_logout
from django.contrib.auth.models     import User


from audit.models       import Audit

from results.models    import AuditResult
from results.models     import WebsiteEvaluationResult

from results.report_navigation  import ReportNavObject


from rulesets.models    import Ruleset


def about(request):
  
   return render_to_response('audits/about.html',{
      'title'             : 'About',
      'main'              : 'home',
   }, context_instance=RequestContext(request))


def logout(request):
   auth_logout(request)
   
   return redirect('login')
     

@login_required      
def audit_run(request):

  user = request.user
   
  audits = Audit.objects.filter(user=user)

  report_nav = ReportNavObject(user, request.session)
  
  return render_to_response('audits/run.html',{
    'title'          : 'Run Audit Reports',
    'report_nav'     : report_nav,
    'audits'         : audits,
    'user'           : request.user,
  }, context_instance=RequestContext(request))

@login_required      
def audit_info(request, audit_id):

  user = request.user
   
  audit = Audit.objects.get(user=user, id=audit_id)

  report_nav = ReportNavObject(user, request.session)

  return render_to_response('audits/audit_info.html',{
    'title'          : "Website Information: " + audit.title,
    'report_nav'     : report_nav,
    'audit'          : audit,
    'user'           : request.user,
  }, context_instance=RequestContext(request))


@login_required      
def audit_processing(request):

  user = request.user
   
  audits = Audit.objects.filter(user=user)
   
  is_processing = False
   
  for a in audits:
   if a.is_processing():
     is_processing = True
     break;

  report_nav = ReportNavObject(user, request.session)
  
  return render_to_response('audits/processing.html',{
    'title'          : 'Audit Report Processing',
    'is_processing'  : is_processing,
    'report_nav'     : report_nav,
    'audits'         : audits,
    'user'           : request.user,
  }, context_instance=RequestContext(request))

  
           
@login_required      
def audit_archive(request):

  user = request.user
  
  audits = Audit.objects.filter(user=user)
   
  has_reports = False
   
  for a in audits.all():
   if len(a.get_complete_reports()) > 0:
     has_reports = True
     break
  
  report_nav = ReportNavObject(user, request.session)
  
  return render_to_response('audits/archive.html',{
    'title'        : 'Archived Reports',
    'has_reports'  : has_reports,
    'report_nav'   : report_nav,
    'audits'       : audits,
    'user'         : request.user,
  }, context_instance=RequestContext(request))

@login_required      
def audit_manage(request):

  user = request.user
   
  audits = Audit.objects.filter(user=user)
     
  has_reports = False
   
  for a in audits.all():
   if a.audit_results.all().count() > 0:
     has_reports = True
     break

  report_nav = ReportNavObject(user, request.session)
  
  return render_to_response('audits/manage.html',{
    'title'        : 'Manage Audit Reports',
    'has_reports'  : has_reports,
    'report_nav'   : report_nav,
    'audits'       : audits,
    'user'         : request.user,
  }, context_instance=RequestContext(request))


@login_required      
def audit_create_report(request, audit_id):

  user = request.user
  
  audit = Audit.objects.get(user=user, id=audit_id)
 
  if not audit or audit.is_processing():
    return HttpResponseRedirect(reverse('audit_run')) 

  try:
  
    uid = generate()

    print("Audit: " + audit.title)
    audit_result = AuditResult(user=audit.user, audit=audit, title=audit.title, slug=uid, depth=audit.depth, ruleset=audit.ruleset, browser_emulation=audit.browser_emulation, wait_time=audit.wait_time)  
    audit_result.save()
    
    for ws in audit.websites.all():      
      uid = generate()

      print("  Website: " + ws.title)
      wser = WebsiteEvaluationResult(user=audit.user, website=ws, audit_result=audit_result, title=ws.title, url=ws.url, slug=uid, depth=audit.depth, ruleset=audit.ruleset, browser_emulation=audit.browser_emulation, wait_time=audit.wait_time)
      wser.save()

    for g in audit.groups.all():      
      uid = generate()
      print("  Group: " + g.title)
      
      for gi in g.group_items.all():
        uid = generate()
        print("    Group Item: " + gi.title)
        giar = AuditResult(user=audit.user, group=g, group_item=gi, audit_result=audit_result, title="["+audit.title+"]["+g.title+"]: "+gi.title, slug=uid, depth=audit.depth, ruleset=audit.ruleset, browser_emulation=audit.browser_emulation, wait_time=audit.wait_time)
        giar.set_status_group_item()
        giar.save()
          
#    for giar1 in AuditResult.objects.filter(user=audit.user, group__position=1):
#      print("    Position 1: " + str(giar1))
#      for giar2 in AuditResult.objects.filter(user=audit.user, group__position__gt=1, group_item__audit_sub_group=giar1.group_item):
#        print("      Position 2: " + str(giar2))
#        giar2.sub_audit_result = giar1
#        giar2.save()

        

    audit_result.set_status_initialized()
      
    return HttpResponseRedirect(reverse('audit_processing', args=[])) 
     
  except:
    print("exception")
    
    return HttpResponseRedirect(reverse('audit_processing')) 
